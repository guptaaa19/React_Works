#package.json: configuration for all our npm in json structure. and keeps track of the versions of our dependencies.keeps the approx version. version keeps on changing with the updates.

#dependencies: our project will be dependent on many packages those packages are called dependencies and npm manages them like version of it.

#Bundler: Most important package in our project is a bundler. It is responsible for taking all your JavaScript code, CSS, HTML, images, and other assets, and packaging them together into a single file or a small number of files inorder to push in production. When we create the create-react-app, behind the scenes uses webpack (webpack bundler).Eg: webpack, parcel, vite. 

#We will use parcel. Parcel will ignite our app, provide the muscles required.
There are two types of packages, dependencies we can install. One is dev-dependencies and the other is normal dependencies.

Dev-dependencies: These dependencies are generally required during our development phase.
Normal-dependencies: These dependencies are used in production also.

#"parcel": "^2.12.0" : difference between ^ and ~ : ~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version. ~1.2.3 will use releases from 1.2.3 to <1.3.0.To avoid any updates we can remove the ~ and ^. Then the version will always remain constant.

^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version. ^1.2.3 will use releases from 1.2.3 to <2.0.0.

#package-lock.json: keeps track of exact version of the dependencies.it locks the version and keeps track of it.

#node_modules: contains all the code that we fetched from the npm. Its like the database of all the dependencies,packages that we need. Its huge. Collection of dependencies.
#transitive dependencies : parcel is dependency, it will have its own dependency and those dependencies will have other dependencies. Its is what node_modules installs when we installed parcel. parcel needs these all dependencies, libraries etc hence it installs them in node_modules. (These are different packages inside npm).

#Every package will have its own package.json, in other words we will have multiple package.json in our project(in node_modules).

#gitignore: Its contains all the files that we dont want to go in production or github. Yes, we absolutely need to put package.json and package-lock.json on git because it maintains the note of all the dependencies that our project need. With the help of these two files we can create our node_modules once again even if we delete it.
By just writing (npm install).

#npx: it is used for only executing the packages.

